import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { HydratedDocument, Types } from 'mongoose';
import { Image } from 'src/image/schemas/image.schema';

export type RoomDocument = HydratedDocument<Room>;

@Schema({ timestamps: true })
export class Room {
  @Prop({ required: true })
  name: string; // T√™n ph√≤ng

  @Prop({ required: true, type: Types.ObjectId, ref: 'Property' })
  property: Types.ObjectId; // Thu·ªôc Property n√†o (quan h·ªá)

  @Prop({ required: true, type: Types.ObjectId, ref: 'RoomType' })
  roomType: Types.ObjectId; // Lo·∫°i ph√≤ng (RoomType)

  @Prop({ type: [{ type: Types.ObjectId, ref: 'Convenience' }] })
  conveniences: Types.ObjectId[]; // Danh s√°ch ti·ªán nghi (Convenience)

  @Prop({ required: true })
  price: number; // Gi√° ph√≤ng

  @Prop()
  area: number; // Di·ªán t√≠ch ph√≤ng

  @Prop()
  capacity: number; // S·ªë ng∆∞·ªùi t·ªëi ƒëa

  @Prop()
  bed: number; // S·ªë gi∆∞·ªùng

  @Prop()
  direction: string; // H∆∞·ªõng ph√≤ng

  @Prop({ default: true })
  isAvailable: boolean; // Ph√≤ng c√≥ s·∫µn hay kh√¥ng

  @Prop({ type: [{ type: Types.ObjectId, ref: 'Image' }], default: [] })
  images: Image[]; // H√¨nh ·∫£nh c·ªßa ph√≤ng

  @Prop({ required: true, default: 1 }) // üè® S·ªë l∆∞·ª£ng ph√≤ng c√≥ s·∫µn
  quantity: number;

  @Prop({ default: false }) // üè∑ N·∫øu quantity = 1 th√¨ ph√≤ng b·ªã kh√≥a
  isLocked: boolean;

  @Prop({ required: true })
  totalRoom: number; // üè® T·ªïng s·ªë l∆∞·ª£ng ph√≤ng
}

export const RoomSchema = SchemaFactory.createForClass(Room);
